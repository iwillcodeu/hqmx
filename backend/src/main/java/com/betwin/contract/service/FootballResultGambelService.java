package com.betwin.contract.service;





import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.parity.Parity;

import com.betwin.util.Web3jConstants;
import com.betwin.util.Web3jUtils;

import com.betwin.contract.autogenerated.FootballResultGambel;

@Service
public class FootballResultGambelService extends AContractService {

	@Autowired
	private Parity web3j;

	@Value("${privatekey.orgnizor:}")
	private String privateKey;

	private static Logger log = LoggerFactory.getLogger(FootballResultGambelService.class);


	@Override
	public String deployContract() throws Exception {

//		List<byte[]> resultList = new ArrayList<byte[]>();

//		byte[] win32= new byte[32];
//		byte[] lose32= new byte[32];
//		byte[] draw32= new byte[32];
//
//		byte[] win="win".getBytes("UTF-8");
//		byte[] lose="lose".getBytes("UTF-8");
//		byte[] draw="draw".getBytes("UTF-8");
//		System.out.println(win.length);
//
//		for(int i=0;i<win.length;i++)
//		{
//			System.out.println(win[i]);
//		}
//
//		System.out.println("-----------------------");
//
////		byte[] lose="lose".getBytes("UTF-8");
//
//		for(int i=0;i<lose.length;i++)
//		{
//			System.out.println(lose[i]);
//		}
//		System.out.println("-----------------------");
////		byte[] draw="draw".getBytes("UTF-8");
//
//		for(int i=0;i<draw.length;i++)
//		{
//			System.out.println(draw[i]);
//		}
//		System.out.println("-----------------------");
//		System.out.println("win".getBytes("UTF-8").toString());
//		System.out.println("lose".getBytes("UTF-8").toString());
//		System.out.println("draw".getBytes("UTF-8").toString());
//
//		System.arraycopy(win, 0, win32, 0, win.length);
//		System.arraycopy(lose, 0, lose32, 0, lose.length);
//		System.arraycopy(draw, 0, draw32, 0, draw.length);

		List<BigInteger> resultList = new ArrayList<BigInteger>();
		BigInteger win = new BigInteger("1");
		BigInteger lose = new BigInteger("2");
		BigInteger draw = new BigInteger("3");
		System.out.println("win "+win);
		System.out.println("lose "+lose);
		System.out.println("draw "+draw);

		resultList.add(win);
		resultList.add(lose);
		resultList.add(draw);
		System.out.println("privateKey="+privateKey);
		Credentials credentials = Credentials.create("0x" + privateKey);
		contract = FootballResultGambel.deploy(web3j, credentials, Web3jConstants.GAS_PRICE, Web3jConstants.GAS_LIMIT_GREETER_TX,resultList)
				.sendAsync().get();

		// get tx receipt
		TransactionReceipt txReceipt = contract.getTransactionReceipt().get();

		// get tx hash and tx fees
		String deployHash = txReceipt.getTransactionHash();
		BigInteger deployFees = txReceipt.getCumulativeGasUsed().multiply(Web3jConstants.GAS_PRICE);

		FootballResultGambel gambel = (FootballResultGambel) contract;

		log.info("Deploy hash: " + deployHash);
		log.info("Deploy fees: " + Web3jUtils.weiToGwei(deployFees));

		return "";
	}

}
